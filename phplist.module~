<?php

/**
 * @module phplist
 * @package phplist - A Drupal 6 module developed for integrating with PHPlist
 * @description Provides an interface for PHPlist
 * @author pb at paulbeaney dot com
 *
 */
if (variable_get('phplist_debug', FALSE)) {
  DEFINE('PHPLIST_DEBUG', TRUE);
}
else {
  DEFINE('PHPLIST_DEBUG', FALSE);
}

/**
 * Provides description information for the phplist module.
 *
 */
function phplist_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Provides mass mailing functionality by interfacing to an external PHPlist installation.');
      break;
    case 'admin/help#phplist':
      return t('<p>The PHPlist interface module allows you to send newsletters to your Drupal users using a separate PHPlist installation.  You can allow your Drupal users to (un)subscribe to newsletters via the Drupal site, but all creating, sending and processing of newsletters/bounces etc. is done directly in PHPlist.</p>
                     <p>The PHPlist pre-requisites are minimal:
                     	<ul>
	                      <li>phplist must be installed and configured (on this or another server)</li>
	                       <li>the PHPlist database must be accessible from this (the Drupal) server on port 3306</li>
	                       <li>you must configure this module\'s "Table prefix" and "User table prefix" to match the values for $table_prefix and $usertable_prefix in the config.php of the PHPlist installation</li>
                     	</ul>
                     </p>
                     <p>User accounts are synchronised from Drupal to PHPlist - if a user changes their email, or their account is deleted, this change is
                     replicated to PHPlist.  An attribute is added to enable you to easily identify users which are not "native" to PHPlist - take care
                     not to amend or delete these users anywhere than in Drupal!</p>');
      break;
  }
}

/**
 * Provides the phplist permission information for the drupal system.
 *
 * @ingroup phplist
 */
function phplist_permission() {
  return array(
    "access lists" => array(
      'title' => t("access lists"),
      'description' => t('Allow users to subscribe to PHPlist lists'),
    ),
    "administer PHPlist" => array(
      'title' => t("administer PHPlist"),
      'description' => t('Administer PHPlist lists'),
    ),
    "manage subscriptions" => array(
      'title' => t("manage subscriptions"),
      'description' => t('Administer other users\' PHPlist subscriptions'),
    ),
  );
}

/**
 * Provides the phplist menu information for the drupal system.
 *
 * @ingroup phplist
 */
function phplist_menu() {

  $items = array();
  $mlm = variable_get('phplist_dbpass', '');
  if (PHPLIST_DEBUG) {
    drupal_set_message(t("PHPlist database password " . ($mlm ? '' : 'not') . " set"));
  }
  $items['admin/config/system/phplist'] = array(
    'title'            => 'PHPlist',
    'description'      => 'PHPlist configuration',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('phplist_admin_settings'),
    'access arguments' => array('administer PHPlist'),
  );
  $items['admin/config/system/phplist/settings'] = array(
    'title' => 'Settings',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/system/phplist/listroles'] = array(
    'title'            => 'List access',
    'description'      => 'Control list access based on user roles',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('phplist_list_roles'),
    'access arguments' => array('administer PHPlist'),
    'type'             => MENU_LOCAL_TASK,
  );
  if ($mlm) {
    $items['user/%/phplist/%/%'] = array(
      'title'            => 'Manage subscription',
      'page callback'    => '_phplist_manage_subscription',
      'page arguments'   => array('', 4, 3, TRUE, 1),
      'access arguments' => array('access lists'),
      'type'             => MENU_CALLBACK,
    );
    $items['newsletters'] = array(
      'title'            => 'Mailing lists',
      'description'      => 'Mailing lists',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('_phplist_redirect'),
      'access arguments' => array('access lists'),
      'type'             => MENU_SUGGESTED_ITEM,
    );
    $items['admin/config/phplist/sync'] = array(
      'title'            => 'Sync all users to PHPlist',
      'page callback'    => '_phplist_sync_users',
      'access arguments' => array('administer PHPlist'),
    );
    $items['user/%/newsletters'] = array(
      'title'			  => variable_get('phplist_user_category_title', t('Newsletters')),
      'page callback'     => 'drupal_get_form',
      'page arguments'	  => array('phplist_user_newsletters'),
      'access arguments'  => array('access lists'),
      'type'              => MENU_LOCAL_TASK,
    );
  }

  return $items;
}

/**
 * Displays and allows an administrator to change the settings for this module.
 *
 * @ingroup phplist
 * @return the content for a settings page.
 */
function phplist_admin_settings($form, &$form_state) {
  $path = drupal_get_path('module', 'phplist');
  drupal_add_js($path . '/phplist.js');

  $form['general'] = array(
    '#title'       => 'External PHPlist configuration',
    '#type'        => 'fieldset',
    '#collapsible' => TRUE,
    );

  $form['general']['phplist_dbhost'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Database host'),
    '#default_value' => variable_get('phplist_dbhost', 'localhost'),
    '#description'   => t('Host name for the PHPlist database')
  );

  $form['general']['phplist_dbname'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Database name'),
    '#default_value' => variable_get('phplist_dbname', 'PHPlist'),
    '#description'   => t('Name of the PHPlist database')
  );

  $form['general']['phplist_dbuser'] = array(
    '#type' => 'textfield',
    '#title' => t('Database user'),
    '#default_value' => variable_get('phplist_dbuser', 'phplist'),
    '#description' => t('User name for the PHPlist database')
  );

  $form['general']['phplist_dbpass'] = array(
    '#type'          => 'password',
    '#title'         => t('Database password'),
    '#description'   => t('Password for the PHPlist database'),
    '#default_value' => variable_get('phplist_dbpass', '')
  );

  $pass = variable_get('phplist_dbpass', '');
  if ($pass == '') {
    $form['general']['phplist_dbpassstatus'] = array(
      '#type'   => 'markup',
      '#prefix' => '<span style="padding:4px;border:solid 1px #f33;color:#f33">'. t('Password is not set'),
      '#suffix' => '</span>'
    );
  }
  else {
    // Test database connection
    $prefix = _phplist_dbconn();
    if ($prefix === FALSE) {
      $message = t('no connection');
    }
    else {
      $connection_ok = 0;
      $message = t('no connection');
      db_set_active('phplist');

      $connection_to_db = FALSE;
      $tables = db_query("SHOW TABLES");

      foreach($tables as $table) {
        $connection_to_db = TRUE;
        if ($table->{"Tables_in_" . variable_get('phplist_dbname', '')} == $prefix['user'] . 'user') {
          $connection_ok += 2;
          if ($connection_ok == 3) {
            break;
          }
        }
        if ($table->{"Tables_in_" . variable_get('phplist_dbname', '')} == $prefix['prefix'] . 'listuser') {
          $connection_ok += 1;
          if ($connection_ok == 3) {
            break;
          }
        }
      }
      db_set_active('default');
      if ($connection_ok == 3) {
        $message = t('database connection OK');
        $form['general']['#collapsed'] = TRUE;
      }
      elseif ($connection_ok == 2) {
        $message = t('table prefix incorrect');
      }
      elseif ($connection_ok == 1) {
        $message = t('user table prefix incorrect');
      }
      else {
        $message = t('DATABASE ERROR: Both table prefixes incorrect OR some other database connection problem');
      }
      if ($connection_to_db == FALSE ) {
        $message = t('DATABASE ERROR: No database connection');
      }

      variable_set('phplist_connection', $connection_ok == 3 ? TRUE : FALSE);
    }

    $form['general']['phplist_dbpassstatus'] = array(
      '#type'   => 'markup',
      // Hack - can't get this to display in the usual #value parameter
      '#prefix' => '<span style="padding:4px;border:solid 1px #000">'. t('Password is set') . " - " . $message,
      '#suffix' => '</span>'
    );
  }
  $form['general']['phplist_prefix'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Table prefix'),
    '#default_value' => variable_get('phplist_prefix', 'phplist_'),
    '#description'   => t('Prefix for the database tables')
  );
  $form['general']['phplist_user_prefix'] = array(
    '#type'          => 'textfield',
    '#title'         => t('User table prefix'),
    '#default_value' => variable_get('phplist_user_prefix', 'phplist_user_'),
    '#description'   => t('Prefix for the user table. Blank = same as table prefix'),
  );
  $form['general']['phplist_subscribe_url'] = array(
    '#type'			 => 'textfield',
    '#title'         => t('PHPList URL'),
    '#required'      => TRUE,
    '#description'   => t('The absolute path or URL of your PHPList front page, for example: <em>/lists/</em> or <em>http://lists.mydomain.com/</em>'),
    '#default_value' => variable_get('phplist_subscribe_url', '/lists'),
  );
  $form['mapping'] = array(
    '#title'       => 'Attribute mapping',
    '#type'        => 'fieldset',
    //'#description' => t('<p>Use these settings to transfer attributes, such as first and last names, addresses, etc, from Drupal profiles to PHPlist (requires user_profile module).  If the PHPlist attributes do not already exist, they will be created.  Data will be transferred from Drupal profiles and overwrite the corresponding PHPlist attribute data (exception: if the Drupal profile field is blank the PHPlist attribute is left alone). </p>
    //<p>
    //
    //Note that this works well with PHPList textline attributes, it may work with dates and checkbox attributes, and it <b>will not work</b> with select attributes, radio buttons, and most other attribute types.  Please test carefully on a few users before proceeding to synchronise all users!</p>
    //<p>
    //Use the SYNCHRONISE NOW link to refresh all existing accounts.
    //</p>')
  );
  $form['mapping']['phplist_roles'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Map non-system roles'),
    '#options'       => array(0, 1),
    '#default_value' => variable_get('phplist_roles', 0),
    '#description'   => t('Create PHPlist attributes for each Drupal non-system user role (i.e., anything other than anonymous user & authenticated user) which is appropriately checked or un-checked for each user')
  );


  if (module_exists('profile')) {
    $form['mapping']['phplist_profileattrib_number'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Number of PHPList attribute fields to synchronize with Drupal profile fields'),
      '#required'      => TRUE,
      '#description'   => t('How many fields to synchronize below.  If you want more or fewer fields, change the number here and save the configuration (button below)'),
      '#default_value' => variable_get('phplist_profileattrib_number', '4'),
    );

    $profattribnum = variable_get('phplist_profileattrib_number', '4');


    for ($i = 1; $i <= $profattribnum; $i++) {
      $paddednum = sprintf("%04u", $i);
      $prof_name = 'phplist_profile_' . $paddednum;
      $attrib_name = 'phplist_plattrib_' . $paddednum;
      if ($i == 1) {
        $attrib_suggestion = "First Name";
      }
      elseif ($i == 2) {
        $attrib_suggestion = "Last Name";
      }
      else {
        $attrib_suggestion = "";
      }

      $form['mapping'][$prof_name] = array(
          '#type'          => 'textfield',
          '#title'	       => t('#' . $i . ' - Drupal profile field for field #' . $i),
          '#default_value' => variable_get($prof_name, 'profile_')
        );

      $form['mapping'][$attrib_name] = array(
          '#type'          => 'textfield',
          '#title'         => t('#' . $i . ' - PHPlist attribute for field #' . $i),
          '#default_value' => variable_get($attrib_name, $attrib_suggestion)
        );

    }
  }
  $form['user'] = array(
    '#title' => 'My Account - My Newsletters options',
    '#type'  => 'fieldset'
    );

  $form['user']['phplist_subscribe_on_register'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Show subscription checkboxes in user registration form'),
    '#default_value' => variable_get('phplist_subscribe_on_register', 0),
  );
  $form['user']['phplist_register_preamble'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Text to show on the registration form'),
    '#default_value' => variable_get('phplist_register_preamble', ''),
    '#description'   => t('')
  );
  $form['user']['phplist_autosubscribe_on_register'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Automatically subscribe users to first listed newsletter'),
    '#default_value' => variable_get('phplist_autosubscribe_on_register', 0),
  );
  $form['user']['phplist_preamble'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Text to show on the user/edit page'),
    '#default_value' => variable_get('phplist_preamble', ''),
    '#description'   => t('')
  );

  $form['user']['phplist_user_category_title'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Text to show in the user/edit screen as the category title for subscribe/unsubscribe to PHPlist newsletters'),
    '#default_value' => variable_get('phplist_user_category_title', t('My newsletters')),
    '#description'   => t('')
  );

  $form['user']['phplist_descriptions_user'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Show mailing list descriptions on user page'),
    '#options'       => array(0, 1),
    '#default_value' => variable_get('phplist_descriptions_user', 1)
  );

  $form['user']['phplist_descriptions_registerpage'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Show mailing list descriptions on the new user registration page'),
    '#options'       => array(0, 1),
    '#default_value' => variable_get('phplist_descriptions_registerpage', 1)
  );

  $form['user']['phplist_descriptions_block'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Show mailing list descriptions on the PHPList subscription block'),
    '#options'       => array(0, 1),
    '#default_value' => variable_get('phplist_descriptions_block', 1)
  );

  $form['user']['phplist_descriptions_format'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Hide email format selection in My Newsletters (My Account)'),
    '#description'	 => t('Note that this option is configurable independently for the PHPlist block'),
    '#options'       => array(0, 1),
    '#default_value' => variable_get('phplist_descriptions_format', 0)
  );
  $form['block']['phplist_format_default'] = array(
    '#type' => 'select',
    '#title' => t('If not showing the email format box (in the block or My Account) , default to this format'),
    '#default_value' => variable_get('phplist_format_default', 0),  // Default to HTML format
    '#options' => array(0 => 'html', 1 => 'text'),
  );

  $form['misc'] = array(
    '#title' => 'Miscellaneous',
    '#type'  => 'fieldset'
  );

  $form['misc']['phplist_anonymous_redirect_register'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Redirect /newsletters to registration'),
    '#description'   => t('Mailing Lists menu - redirect anonymous users to register instead of login'),
    '#default_value' => variable_get('phplist_anonymous_redirect_register', 0),
  );
  $form['misc']['phplist_delete_user'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Delete user from PHPlist when deleted from Drupal (EXPERIMENTAL)'),
    '#default_value' => variable_get('phplist_delete_user', 0),
  );

  if (isset($connection_ok)) {
    $form['sync'] = array(
      '#title' => 'Synchronise users to PHPlist',
      '#type'  => 'fieldset'
      );

    $form['sync']['phplist_sync'] = array(
      '#type'        => 'item',
      '#prefix'      => t('<a href="' . url('admin/config/phplist/sync') . '">Synchronise now</a>'),
      '#description' => t('Update all users to PHPlist, add any that are missing and update existing.  USE WITH CARE - CAN TAKE A WHILE TO RUN!')
    );
  }

  $form['phplist_debug'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Turn on debugging'),
    '#default_value' => variable_get('phplist_debug', FALSE),
  );

  $form['#validate'] = array('phplist_admin_settings_submit_pass', 'phplist_check_db');

  return system_settings_form($form);
}

/**
 * Check the PHPlist database is accessible
 *
 * @param $form
 *
 * @param $form_state
 *
 * @return
 *  TRUE or FALSE
 */
function phplist_check_db($form, &$form_state) {
  global $databases;
  $error = FALSE;

  // Add a routine to check the database details are valid, and unset the password if not so as to prevent taking the whole site down - but how ??

  // Try to stay database independent
  $values = $form_state['values'];
  if (is_array($databases)) {
    $url = $databases['default'];
  }
  else {
    $url = $databases;
  }

  $db_type = db_driver();

  switch ($db_type) {
    case 'mysql':
      $db_dsn = drupal_encode_path($values['phplist_dbuser']) . ":" . drupal_encode_path($values['phplist_dbpass']) . "@" . $values['phplist_dbhost'] . '/' . $values['phplist_dbname'] . "";
      $conn = @mysql_connect($values['phplist_dbhost'], $values['phplist_dbuser'], $values['phplist_dbpass']);
      if (!$conn) {
        $error = TRUE;
      }
      else {
        @mysql_select_db($values['phplist_dbname'], $conn);
      }
      break;

    case 'mysqli':
      $conn = @new mysqli($values['phplist_dbhost'], $values['phplist_dbuser'], $values['phplist_dbpass'], $values['phplist_dbname']);
      if ($conn->connect_errno != 0) {
        $error = TRUE;
      }
      break;

    default:
      $error = TRUE;
  }

  if (!$error) {
    // Basic connection appears to be ok - check prefixes are correct
    switch ($db_type) {
      case 'mysqli':
        $rs = $conn->query("SELECT * FROM " . $values['phplist_user_prefix'] . 'user LIMIT 1');
        if ($conn->affected_rows != 1) {
          drupal_set_message(t('User table prefix appears to be incorrect'), 'error');
          $error = TRUE;
        }
        $rs = $conn->query("SELECT * FROM " . $values['phplist_prefix'] . 'listuser LIMIT 1');
        if ($conn->affected_rows != 1) {
          drupal_set_message(t('Table prefix appears to be incorrect'), 'error');
          $error = TRUE;
        }
        @$conn->close();
        break;

      case 'mysql':
        $rs = @mysql_query("SELECT * FROM " . $values['phplist_user_prefix'] . 'user LIMIT 1', $conn);
        if (!$rs) {
          drupal_set_message(t('User table prefix appears to be incorrect'), 'error');
          $error = TRUE;
        }
        $rs = @mysql_query("SELECT * FROM " . $values['phplist_prefix'] . 'listuser LIMIT 1', $conn);
        if (!$rs) {
          drupal_set_message(t('Table prefix appears to be incorrect'), 'error');
          $error = TRUE;
        }
        @mysql_close($conn);
        break;

        // TODO Add support for other databases
    }
  }
  else {
    drupal_set_message(t('Unable to connect to PHPlist database'), 'error');
  }

  if ($error) {
    unset($form_state['values']['phplist_dbpass']);
    variable_del('phplist_dbpass');
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function phplist_list_roles($form, &$form_state) {
  $path = drupal_get_path('module', 'phplist');
  drupal_add_js($path . '/phplist.js');

  $form['intro'] = array(
    '#type'  => 'markup',
    '#value' => t('You can determine access to lists based on roles'),
  );

  // Create a tab for each role
  $roles = db_query("SELECT rid, name FROM {role}");
  $lists = _phplist_get_lists(0);
  $options = array();

  if (count($lists) == 0) {
    drupal_set_message(t('Please configure the PHPlist module and ensure you have some lists setup in PHPlist first'), 'warning');
    return;
  }

  foreach ($lists as $l) {
    $options[$l->lid] = $l->name;
  }

  if (count($options) > 0) {
    // Add the "all" option

    // The following commented line replaced by the one after it after reports of array keys being lost using array_merge #414206
    //$options = array_merge(array("<strong>". t('All'). "</strong>"), $options);
    $options = array("<strong>" . t('All') . "</strong>") + $options;
  }

  foreach($roles as $role) {
    // Lookup existing permissions
    $perms       = db_query("SELECT * FROM {phplist_access} WHERE rid = :rid", array(':rid' => $role->rid));
    $aryperms    =  array();
    foreach($perms as $perm) {
      $aryperms[$perm->lid] = TRUE;
    }

    // If all the lists are selected, make sure 'All' is ticked too
    if (count($aryperms) == count($options) - 1) {
      $aryperms[0] = TRUE;
    }

    $form['role' . $role->rid] = array(
      '#type'        => 'fieldset',
      '#title'       => $role->name,
      '#collapsible' => TRUE,
      '#collapsed'   => TRUE,
    );

    $form['role' . $role->rid]['lists' . $role->rid] = array(
      '#type'          => 'checkboxes',
      '#default_value' => array_keys($aryperms),
      '#options'       => $options,
    );
  }

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Save settings'),
  );
  return $form;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function phplist_list_roles_submit($form, &$form_state) {
  db_delete('phplist_access')
    ->execute();

  foreach ($form_state['values'] as $key => $value) {
    if (substr($key, 0, 4) == 'list') {
      $rid = substr($key, 5);

      foreach ($value as $lid => $perm) {
        if ($perm) {
          $id = db_insert('phplist_access')
            ->fields(array(
              'lid' => $lid,
              'rid' => $rid,
            ))
            ->execute();
        }
      }
    }
  }
}

/**
 * Utility function to lookup the PHPlist database prefix
 *
 * @ingroup phplist
 */
function _phplist_get_prefix() {
  // Make it static so we don't have to keep doing database queries
  static $prefix;

  if ($prefix === NULL) {
    $prefix['prefix'] = db_escape_table(variable_get('phplist_prefix', 'phplist_'));
    $prefix['user']   = db_escape_table(variable_get('phplist_user_prefix', $prefix['prefix']));

    if ($prefix['user'] == '') {
      $prefix['user'] = $prefix['prefix'];
    }
  }

  return $prefix;
}

/**
 * Implements hook_user_login().
 */
function phplist_user_login(&$edit, $account) {
  static $done;
  $phplist_subscribe_lists = array();

  if ($done) {
    return true;
  }

  // Ensure we don't run this code twice when creating a new account
  if ($account->access == 0) {
    $phplist_subscribe_lists = isset($account->phplist_subscribe_lists) ? $account->phplist_subscribe_lists : array();
  }

  if ($account->access == 0 && count($phplist_subscribe_lists) ) {
    // Check whether user is already in PHPlist database (possible, but unlikely in most situations)
    $phplistid = _phplist_lookup_phplistid($account->mail);
    _phplist_sync_user($phplistid, $user);
    if (PHPLIST_DEBUG) {
      $phplistid = _phplist_lookup_phplistid($account->mail);
      drupal_set_message(t('Created phplistid !phplistid for email !mail', array('!phplistid' => $phplistid, '!mail' => $account->mail)), 'info');
    }

    $l_done = 0; // id of first public list
    if (variable_get('phplist_autosubscribe_on_register', FALSE)) {
      // Ensure they are signed up to the first mailing list if auto-subscribe is activated

      $lists = _phplist_get_lists($user);

      if (isset($lists[0])) {
        $l_done = $lists[0]->lid;
        _phplist_manage_subscription($account->mail, $l_done);

        if (PHPLIST_DEBUG) {
          drupal_set_message(t('Auto-subscribed to list !list', array('!list' => $lists[0]->lid)), 'info');
        }
      }
    }

    // Cycle through all user-selected lists and sign the user up to them
    foreach ($phplist_subscribe_lists as $lid => $sub) {
      if ($l_done != $lid) {
        _phplist_manage_subscription($account->mail, $lid, ($sub ? 'subscribe' : 'unsubscribe'));
      }
      if (PHPLIST_DEBUG) {
        drupal_set_message(t('Email: !mail, phpid: !phplistid, ListID: !lid, Sub: !sub', array('!mail' => $account->mail, '!phplistid' => $phplistid, '!lid' => $lid, '!sub' => $sub)), 'info');
      }
    }

    if ($account->access == 0) {
      unset($account->phplist_subscribe_lists);
      user_save($account);
    }
  }
  $done = TRUE;
}

/**
 * Implements hook_user_insert().
 */
function phplist_user_insert(&$edit, $account, $category) {
  $phplist_subscribe_lists = array();

  $user = $account;
  if ($user->status) {
    $phplist_subscribe_lists = isset($edit['phplist_subscribe_lists']) ? $edit['phplist_subscribe_lists'] : array();
  }

  if ($user->status && count($phplist_subscribe_lists) ) {
    // Check whether user is already in PHPlist database (possible, but unlikely in most situations)
    $phplistid = _phplist_lookup_phplistid($user->mail);
    _phplist_sync_user($phplistid, $user);
    if (PHPLIST_DEBUG) {
      $phplistid = _phplist_lookup_phplistid($user->mail);
      drupal_set_message(t("Created phplistid !phplistid for email !mail", array('!phplistid' => $phplistid, '!mail' => $user->mail)), 'info');
    }

    $l_done = 0; // id of first public list
    if (variable_get('phplist_autosubscribe_on_register', FALSE)) {
      // Ensure they are signed up to the first mailing list if auto-subscribe is activated

      $lists = _phplist_get_lists($user);

      if (isset($lists[0])) {
        $l_done = $lists[0]->lid;
        _phplist_manage_subscription($user->mail, $l_done);

        if (PHPLIST_DEBUG) {
          drupal_set_message(t('Auto-subscribed to list !list', array('!list' => $lists[0]->lid)), 'info');
        }
      }
    }

    // Cycle through all user-selected lists and sign the user up to them
    foreach ($phplist_subscribe_lists as $lid => $sub) {
      if ($l_done != $lid) {
        _phplist_manage_subscription($user->mail, $lid, ($sub ? 'subscribe' : 'unsubscribe'));
      }
      if (PHPLIST_DEBUG) {
        drupal_set_message(t("Email: !mail, phpid: !phplistid, ListID: !lid, Sub: !sub", array('!mail' => $user->mail, '!phplistid' => $phplistid, '!lid' => $lid, '!sub' => $sub)), 'info');
      }
    }
  }
  $done = TRUE;
}

/**
 * Implements hook_user_presave().
 */
function phplist_user_presave(&$edit, $account, $category) {
  // Account has been modified - object $user still has original email, array $edit has modified (if changed)
  //$phplistid = _phplist_lookup_phplistid($user->mail);
}

/**
 * Implements hook_user_update().
 */
function phplist_user_update(&$edit, $account, $category) {
  $phplistid = _phplist_lookup_phplistid($account->mail);
  _phplist_sync_user($phplistid, $account);
}

/**
 * Implements hook_user_cancel().
 */
function phplist_user_cancel($edit, $account, $method) {
  // User is being deleted - update PHPlist too
  $phplistid = _phplist_lookup_phplistid($user->mail);

  if (variable_get('phplist_delete_user', 0)) {
    db_set_active('phplist');

    // Completely remove this user from PHPlist
    db_delete($prefix['prefix'] .'listuser')
      ->condition('userid', $phplistid)
      ->execute();

    db_delete($prefix['prefix'] .'attribute')
      ->condition('userid', $phplistid)
      ->execute();

    db_delete($prefix['prefix'] .'usermessage')
      ->condition('userid', $phplistid)
      ->execute();

    db_delete($prefix['user'] .'message_bounce')
      ->condition('userid', $phplistid)
      ->execute();

    db_delete($prefix['user'] .'user')
      ->condition('userid', $phplistid)
      ->execute();

    db_delete($prefix['user'] .'user_history')
      ->condition('userid', $phplistid)
      ->execute();

    db_delete($prefix['user'] .'rss')
      ->condition('userid', $phplistid)
      ->execute();

      db_set_active('default');
  }
  else {
    // Just remove the Drupal flag from the PHPlist account
    _phplist_update_attribute('Drupal', 'checkbox', 'off', $phplistid);
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function phplist_user_newsletters($form, &$form_state) {
  global $user;

  if (($user->uid == 1 || user_access('manage subscriptions')) && $user->uid != arg(1)) {
    // This is an admin editing someone else's subs
    $cur_user = user_load(arg(1));
  }
  elseif ($user->uid == arg(1)) {
    $cur_user = $user;
  }
  else {
    // Go away !!
    if ($user->uid > 0) {
      // If logged in, go to our own Newsletters page
      drupal_goto('user/' . $user->uid . '/newsletters');
    }
    else {
      // Otherwise go to a login
      drupal_goto('user');
    }
    exit;
  }

  // Lookup the list of mails lists
  $form = phplist_lists($cur_user);

  // Show the pre-amble text
  $form['preamble'] = array(
    '#type'   => 'markup',
    '#prefix' => variable_get('phplist_preamble', ''),
    '#weight' => -10
  );

  if (variable_get('phplist_descriptions_format', 0)) {
    $form['phplist_html'] = array(
      '#type'  => 'value',
      '#value' => variable_get('phplist_format_default', 0),
    );
  }
  else {
    $form['phplist_html'] = array(
      '#type' => 'checkbox',
      '#title' => t('Receive emails in plain text format'),
      '#options' => array(0, 1),
      '#default_value' => isset($cur_user->data['phplist_html']) ? $cur_user->data['phplist_html'] : variable_get('phplist_format_default', 0),
      '#weight' => 10,
    );

    $form['submit'] = array(
      '#type'   => 'submit',
      '#value'  => t('Save'),
      '#weight' => 11,
    );
  }

  return $form;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function phplist_user_newsletters_submit($form_id, $form_values) {
  global $user;

  if (($user->uid == 1 || user_access('manage subscriptions')) && $user->uid != arg(1)) {
    // This is an admin editing someone else's subs
    $cur_user = user_load(arg(1));
  }
  elseif ($user->uid == arg(1)) {
    $cur_user = $user;
  }
  else {
    return;
  }
  $cur_user->data['phplist_html'] = $form_values['values']['phplist_html'];
  //user_save($cur_user, array('phplist_html' => $form_values['values']['phplist_html']));
  user_save($cur_user);
  drupal_set_message(t('Newsletter format preference saved'), 'info');
}

/**
 * Handle (un)subscribing to a given mailing list
 *
 * Email parameter is now redundant
 * @ingroup phplist
 * @return none
 */

function _phplist_manage_subscription($email, $lid, $action = 'subscribe', $redirect = FALSE, $userid = 0) {
  global $user;
  $prefix = _phplist_dbconn();
  if ($prefix === FALSE) {
    return;
  }

  $lid    = intval($lid);
  $userid = intval($userid);

  // Check token - CSRF protection
  //$path = preg_replace('/\/' . $value . '$/', '', $_GET['q']);
  if ($redirect && (!isset($_GET['token']) || !phplist_check_token($_GET['token'], arg(4)))) {
    drupal_set_message(t('Got an invalid token. Subscription not updated.'), 'error');
    drupal_goto('user/' . $userid . '/newsletters');
  }
  else {
    if ($userid > 0 && user_access("manage subscriptions") && $user->uid != $userid) {
      // This is a manager updating another user's account
      $cur_user = array_shift(user_load_multiple(array($userid)));
      $email = $cur_user->mail;
    }
    elseif ($email != '' && $user->uid == $userid) {
      $cur_user = array_shift(user_load_multiple(array(), array('mail' => $email)));
    }
    elseif ($userid > 0) {
      $cur_user = user_load($userid);
      $email = $cur_user->mail;
    }

    if ($email == '') {
      form_set_error("", t('Email address is empty for UID ' . $userid));
      drupal_goto('user/' . $userid . '/newsletters');
    }
    
    if ($lid == 0 || $lid == '') {
      drupal_goto('user/' . $userid . '/newsletters');
    }

    $phplistid = _phplist_lookup_phplistid($email);
    if (PHPLIST_DEBUG) {
      drupal_set_message(t("Found phplistid [!phplistid] for email !mail", array('!phplistid' => $phplistid, '!mail' => $email)), 'info');
    }

    // This bit of code is for administrators who have forgotten to "sync users" first !!
    // Thanks to Dave Cohen, http://drupal.org/node/249559
    if (!$phplistid) {
      $account = array_shift(user_load_multiple(array(), array('mail' => $email)));
      if ($account) {
        _phplist_sync_user($phplistid, $account);
      }
      $phplistid = _phplist_lookup_phplistid($email);
    }

    $booOK = FALSE;
    if ($phplistid) {
      if ($action == 'subscribe') {
        // Check user is allowed to subscribe to this list
        $roles = array();
        if (isset($user->roles)) {
          foreach ($user->roles as $rid => $role) {
            $roles[] = $rid;
          }
        }
        $roles = implode(",", $roles);

        if (db_query("SELECT lid FROM {phplist_access} WHERE lid = :lid AND rid IN (:rid)", array(':lid' => $lid, ':rid' => $roles))->fetchField()) {
          $booOK = TRUE;
        }
      }
      else {
        $booOK = TRUE;
      }

      db_set_active('phplist');

      $phplist_listuser_table_name = $prefix['prefix'] . "listuser";

      switch ($action) {
        case 'subscribe':
          if ($booOK) {
            //Right here there needs to be a check to see if the user is already subscribed to the selected list.
            if (db_query("SELECT userid FROM $phplist_listuser_table_name WHERE userid = :userid AND listid = :listid", array(':userid' => $phplistid, ':listid' => $lid))->fetchField()) {
              if (PHPLIST_DEBUG) {
                db_set_active('default');
                drupal_set_message("User $phplistid already subscribed to list $lid");
              }
            }
            else {
              $id = db_insert($phplist_listuser_table_name)
                ->fields(array(
                  'userid' => $phplistid,
                  'listid' => $lid,
                  'entered' => date("Y-m-d H:i:s"),
                ))
                ->execute();
              if (PHPLIST_DEBUG) {
                db_set_active('default');
                drupal_set_message(t("Subscribing !phplistid to list !lid", array('!phplistid' => $phplistid, '!lid' => $lid)), 'info');
              }
            }
          }
          break;

        case 'unsubscribe':
          db_delete($phplist_listuser_table_name)
            ->condition('userid', $phplistid)
            ->condition('listid', $lid)
            ->execute();
          if (PHPLIST_DEBUG) {
            db_set_active('default');
            drupal_set_message(t("Unsubscribing !phplistid from list !lid", array('!phplistid' => $phplistid, '!lid' => $lid)), 'info');
          }

      }

      db_set_active('default');

      if ($redirect) {
        if ($booOK) {
          drupal_set_message(t("Your subscriptions have been updated"));
        }
        else {
          drupal_set_message(t('You do not have permission to subscribe to this list'));
        }
        drupal_goto('user/' . $userid . '/newsletters');
      }
    }
    else {
      drupal_set_message(t('Failed to update email newsletter subscription.'));
    }
  }
}


/**
 * Displays available mailing lists
 *
 * @ingroup phplist
 * @return form listing available mailing lists
 */
function phplist_lists($user, $op = 'list', $lid = 0, $subonly = FALSE) {
  global $databases;

  if (!isset($databases['phplist'])) {
    _phplist_dbconn();
    if (variable_get('phplist_dbpass', '') == '') {
      return;
    }
  }

  $booshowdescription = variable_get('phplist_descriptions_user', 1);

  // Lookup available mailing lists and allow user to (un)subscribe
  $lists = _phplist_get_lists($user);

  if (!$lists) {
    $lists = array();
  }

  $rows = array();
  foreach ($lists as $list) {
    if ($list->userid == '' && !$subonly) {

      $rows[] = array('name' => "<b>" . stripslashes( $list->name ) . "</b>" . ($booshowdescription ? " <br />" . stripslashes( $list->description ) : ""),
        'subscribe' => l(t('Subscribe'), "user/" . $user->uid . "/phplist/subscribe/" . $list->lid, array('query' => array('token' => phplist_get_token($list->lid))))
      );
    }
    elseif ($list->userid != '') {
      $rows[] = array('name' => "<b>" . stripslashes( $list->name ) . "</b>" . ($booshowdescription ? " <br />" . stripslashes( $list->description ) : ""),
        'unsubscribe' => l(t('Unsubscribe'), "user/" . $user->uid . "/phplist/unsubscribe/" . $list->lid, array('query' => array('token' => phplist_get_token($list->lid))))
      );
    }
  }

  if (empty($rows)) {
    if ($subonly) {
      // We're in the user account area - change the wording slightly
      $rows[] = array(array('data' => t('No subscriptions.  You can subscribe to mailing lists <a href="' . url('phplist') . '">here</a>.'), 'colspan' => '2'));
    }
    else {
      $rows[] = array(array('data' => t('No lists available.'), 'colspan' => '2'));
    }
  }

  $header = array('', array('data' => '', 'colspan' => '2'));

  $content = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'lists')));
  $form['assigned'] = array(
    '#type' => 'markup',
    '#prefix' => $content
    );

  return $form;
}

/**
 * Looks up the currently available mailing lists
 *
 * @ingroup phplist
 * @return array of available mailing lists
 */
function _phplist_get_lists($user) {
  $prefix = _phplist_dbconn();
  if ($prefix === FALSE) {
    return;
  }
  if (PHP_DEBUG) {
    drupal_set_message(t('Looking for lists available to !email', array('!email' => $user->mail)), 'info');
  }
  if (is_object($user) && isset($user->mail)) {
    $mail = $user->mail;
  }
  else {
    $mail = '';
  }
  $phplistid = _phplist_lookup_phplistid($mail);

  $lists = array();

  db_set_active('phplist');

  $roles = array();
  if (isset($user->roles)) {
    foreach ($user->roles as $rid => $role) {
      $roles[] = $rid;
    }
  }

  $result = db_query("SELECT DISTINCT l.id as lid, l.name as name, l.description as description, (SELECT userid FROM {$prefix['prefix']}listuser t2 WHERE t2.listid=l.id AND userid=:uid) as 'userid'
    FROM {$prefix['prefix']}list l LEFT OUTER JOIN {$prefix['prefix']}listuser t2 ON l.id = t2.listid
    WHERE active=1 ORDER BY listorder", array(':uid' => $phplistid));

  foreach($result as $list) {
    $lists[] = $list;
  }

  db_set_active('default');

  if (isset($user->roles)) {
    $allowed = array();
    // Check access for each list and remove it if no access
    foreach ($lists as $list) {
      if (db_query("SELECT lid FROM {phplist_access} WHERE lid = :lid AND rid IN (:rid)", array(':lid' => $list->lid, ':rid' => implode(',', $roles)))->fetchField()) {
        $allowed[] = $list;
      }
    }
  }

  return isset($allowed) ? $allowed : $lists;
}


/**
 * Lookups up the PHPlist id for a given email
 *
 * @ingroup phplist
 * @return the PHPlist id for a given user
 */
function _phplist_lookup_phplistid($email) {
  if ($email == '') {
    return;
  }
  static $id;

  if (isset($id[$email]) && $id[$email] != '') {
    return $id[$email];
  }

  $prefix = _phplist_dbconn();
  if ($prefix === FALSE) {
    return;
  }
  if (PHPLIST_DEBUG) {
    drupal_set_message(t('Looking up PHPlist id for email !email', array('!email' => $email)), 'info');
  }

  db_set_active('phplist');
  $phplistid = db_query("SELECT id FROM {$prefix['user']}user WHERE email=:email", array(':email' => $email))->fetchField();
  db_set_active('default');

  if ($phplistid) {
    $id[$email] = $phplistid;
  }
  return $phplistid;
}

/**
 * Create/update a specific Drupal user to PHPlist
 *
 * @ingroup phplist
 * @return none
 */
function _phplist_sync_user($phplistid, $user) {
  static $drupalid;

  $prefix = _phplist_dbconn();
  if ($prefix === FALSE) {
    return;
  }

  $booroles = variable_get('phplist_roles', FALSE);

  $attrmap = array();
  $profattribnum = variable_get('phplist_profileattrib_number', '4');

  for ($i = 1; $i <= $profattribnum; $i++) {
    $paddednum = sprintf("%04u", $i);
    $prof_var_name = 'phplist_profile_' . $paddednum;
    $attrib_var_name = 'phplist_plattrib_' . $paddednum;

    $profile_name = variable_get($prof_var_name, '');
    $attrib_name = variable_get($attrib_var_name, '');

    if ( $profile_name != 'profile_'   && $profile_name != '' && $attrib_name != '') {
      // Map profile field to to PHPlist attribute
      $attrmap[] = array($profile_name, $attrib_name);
    }
  }

  if ($phplistid != '') {
    db_set_active('phplist');
    $result = db_query("UPDATE {$prefix['user']}user SET email=:email, modified=NOW(), htmlemail=:html, confirmed=1 WHERE id=:id",
      array(':email' => ($user->mail == '' ? $user->init : $user->mail),
        ':html' => (empty($user->data['phplist_html']) ? 1 : 0),
        ':id' => $phplistid));
  }
  else {
    $uniqueid = _phplist_uniqueid($user->mail);
    db_set_active('phplist');
    db_query("INSERT INTO {$prefix['user']}user (email, entered, htmlemail, confirmed, uniqid) VALUES(:email, NOW(), :html, 1, :uid)",
      array(':email' => $user->mail,
        ':html' => (isset($user->data['phplist_html']) && ($user->data['phplist_html'] == 0 || $user->data['phplist_html'] == '') ? 1 : 0),
        ':uid' => $uniqueid));
    $phplistid = db_query("SELECT last_insert_id()")->fetchField();
  }
  db_set_active('default');

  if (module_exists('profile')) {
    // Get this user profile if we need to access the roles or profile settings
    profile_load_profile($user);
  }

  // Update/add PHPlist attrbiutes for this user's roles
  $aryroles = $user->roles;

  foreach ($aryroles as $role) {
    if ($booroles && $role != 'authenticated user') {
      _phplist_update_attribute('Drupal role - ' . $role, 'checkbox', 'on', $phplistid);
    }
    elseif ($role == 'authenticated user') {
      // Always add this role to tag the PHPlist user as originating from Drupal
      _phplist_update_attribute('Drupal', 'checkbox', 'on', $phplistid);
      if (!$booroles) {
        break;
      }
    }
  }

  // Synchronise other profile fields to PHPlist attributes
  //for now this always overwrites PHPlist data with Drupal profile data.
  //Future mod: Give options to transfer either way and overwrite or just fill in; or fill in from both sources but with a preference for one or the other if there is a conflict
  if (module_exists('profile')) {
    // Store other attributes/profile settings
    foreach ($attrmap as $attr) {
      if (isset($user->{$attr[0]})) {
        if (PHPLIST_DEBUG) {
          drupal_set_message('Synchronised attribute ' . $attr[1] . ' : ' . $user->{$attr[0]});
        }
        _phplist_update_attribute($attr[1], 'textline', $user->{$attr[0]}, $phplistid);
      }
    }
  }
}

function _phplist_update_attribute($attr_name, $attr_type, $attr_val, $uid) {
  $prefix = _phplist_dbconn();
  if ($prefix === FALSE) {
    return;
  }
  db_set_active('phplist');

  // Check the attribute exists and create it if not
  $drupalid = db_query("SELECT id FROM {$prefix['user']}attribute WHERE name=:attr", array(':attr' => $attr_name))->fetchField();

  if ($drupalid == '') {
    // Attribute has not been created
    db_query("INSERT INTO {$prefix['user']}attribute(name, type, listorder, default_value, required, tablename) VALUES(:attr, :type, 0, '', 0, :name)",
      array(':attr' => $attr_name,
        ':type' => $attr_type,
        ':name' => $attr_name));
    $drupalid = db_query("SELECT id FROM {$prefix['user']}attribute WHERE name=:name", array(':name' => $attr_name))->fetchField();
    if (PHPLIST_DEBUG) {
      db_set_active('default');
      drupal_set_message("Added PHPlist attribute");
    }
  }

  // Add attribute, but only if the Drupal profile value is non-empty
  if ($attr_val != '') {
    db_query("REPLACE INTO {$prefix['user']}user_attribute VALUES(:did, :uid, :val)",
      array(':did' => $drupalid,
        ':uid' => $uid,
        ':val' => $attr_val));
  }

  db_set_active('default');
}


/**
 * Fetched the id of the default mailing list to sign new users up to
 *
 * @ingroup phplist
 * @return id of mailing list
 */
function _phplist_default_list() {
  $prefix = _phplist_dbconn();
  if ($prefix === FALSE) {
    return;
  }

  db_set_active('phplist');
  $lid = db_query("SELECT id FROM {$prefix['prefix']}list WHERE active=1 ORDER BY listorder LIMIT 1")->fetchField();
  db_set_active('default');

  return $lid;
}


/**
 * Check database DSN is available - returm empty string if not
 *
 * @ingroup phplist
 * @return table prefix
 */
function _phplist_dbconn() {
  global $databases;

  if (!isset($databases['phplist'])) {
    if (variable_get('phplist_dbpass', '') == '') {
      return FALSE;
    }
    Database::addConnectionInfo('phplist', 'default', array (
      'database' => variable_get('phplist_dbname', ''),
      'username' => variable_get('phplist_dbuser', ''),
      'password' => variable_get('phplist_dbpass', ''),
      'host' => variable_get('phplist_dbhost', ''),
      'port' => '',
      'driver' => $databases['default']['default']['driver'],
      'prefix' => array('default' => ''),
    ));
  }
  return _phplist_get_prefix();
}


/**
 * Create/update all active Drupal users to PHPlist
 *
 * @ingroup phplist
 * @return none
 */
function _phplist_sync_users() {
  $prefix = _phplist_dbconn();
  if ($prefix === FALSE) {
    return;
  }

  // Find all the (non-blocked) users in the system
  $result = db_query("SELECT mail FROM {users} WHERE status = :status", array(':status' => 1));

  // Cycle through the Drupal users and sync with PHPlist
  while ($user = $result->fetchObject()) {
    $phplistid = _phplist_lookup_phplistid($user->mail);
    $user = array_shift(user_load_multiple(array(), array('mail' => $user->mail)));
    _phplist_sync_user($phplistid, $user);
  }

  drupal_set_message(t('Synchronisation to PHPlist complete'));
  drupal_goto('admin/config/phplist');
}


/**
 * Make sure users see the correct screen depending on whether or not they are logged in and which action they are trying to execute
 *
 * @ingroup phplist
 * @return none
 */
function _phplist_redirect() {
  global $user;

  if ($user->uid > 0) {
    // Logged in users always go to their My Newsletters page
    drupal_goto('user/' . $user->uid . '/newsletters');
  }
  else {
    // Anonymous users need sending to the appropriate page
    if (arg(1) == 'unsubscribe') {
      return phplist_unsubscribe_form();
    }
    elseif (arg(1) == 'confirm') {
      return phplist_confirm_subscription();
    }
    elseif (arg(1) == '' && variable_get('phplist_anonymous_redirect_register', 0)) {
      drupal_goto('user/register');
    }
    else {
      // If all else fails, take them to the login screen
      drupal_goto('user/login', array('query' => array('destination' => 'newsletters')));
    }
  }
}


/**
 * Create a unique ID for PHPlist
 *
 * @ingroup phplist
 * @return md5 string
 */
function _phplist_uniqueid($stremail) {
  // Function taken from PHPlist itself
  // Make sure it is really unique
  $prefix = _phplist_dbconn();
  if ($prefix === FALSE) {
    return;
  }

  db_set_active('phplist');
  $id = md5(uniqid(mt_rand()));

  $result = db_query("SELECT id FROM {$prefix['user']}user WHERE uniqid=:id", array(':id' => $id))->fetchField();

  while ($result) {
    $id = md5(uniqid(mt_rand()));
    // TODO Please convert this statement to the D7 database API syntax.
    $result = db_query("SELECT id FROM {$prefix['user']}user WHERE uniqid=:id'", array(':id' => $id))->fetchField();
  }

  db_set_active('default');
  return $id;
}


/**
 * Implements hook_block_info().
 */
function phplist_block_info() {
  if (TRUE) {
    $blocks['PHPlist subscribe'] = array(
      'info' => t('PHPList subscribe'),
    );
    return $blocks;
  }
}

/**
 * Implements hook_block_configure().
 */
function phplist_block_configure($delta) {
  if (TRUE && $delta == 'PHPlist subscribe') {
    $block_body = variable_get('phplist_subscribe_block_header', array('value' => '', 'format' => filter_default_format()));
/*
    // basically straight out of block.module lines 554-566
    $form['body_filter']['#weight'] = -17;
    $form['body_filter']['phplist_subscribe_block_header'] = array(
      '#type' => 'textarea',
      '#title' => t('Block text'),
      '#default_value' => $block_body['content'],
      '#rows' => 15,
      '#description' => t('Explanatory text that will be displayed above the subscription form.'),
      '#weight' => -17,
    );
    if (!isset($block_body['format'])) {
      $block_body['format'] = FILTER_FORMAT_DEFAULT;
    }
    $form['body_filter']['phplist_subscribe_block_header_format'] = filter_form($block_body['format'], -16);
*/
    // TODO Work out what this next bit is really for and how to use it properly
    $form['block']['phplist_subscribe_block_header'] = array(
      '#type' => 'text_format',
      '#title' => t('Block text'),
      '#default_value' => is_array($block_body) && array_key_exists('value', $block_body) ? $block_body['value'] : '',
      '#format' => $block_body['format'],
      '#rows' => 15,
      '#description' => t('Explanatory text that will be displayed above the subscription form.'),
      '#weight' => -17,
    );
    $form['block']['phplist_email_confirm'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show email confirmation field'),
      '#default_value' => variable_get('phplist_email_confirm', 0),
    );
    $form['block']['phplist_format_block'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show email format box'),
      '#default_value' => variable_get('phplist_format_block', 1),
    );
    $form['block']['phplist_email_width'] = array(
      '#type' => 'textfield',
      '#title' => t('Size of email box(es)'),
      '#default_value' => variable_get('phplist_email_width', 16),
      '#size' => 5,
    );
    $form['block']['phplist_format_default'] = array(
      '#type' => 'select',
      '#title' => t('If not showing the email format box, default to this format'),
      '#default_value' => variable_get('phplist_format_default', 0),  // Default to HTML format
      '#options' => array(0 => 'html', 1 => 'text'),
    );

    return $form;
  }
}

/**
 * Implements hook_block_save().
 */
function phplist_block_save($delta, $edit) {
  if (TRUE && $delta == 'PHPlist subscribe') {
    /*if (!filter_access($edit['phplist_subscribe_block_header_format'])) {
      $edit['phplist_subscribe_block_header_format'] = FILTER_FORMAT_DEFAULT;
    }
    variable_set('phplist_subscribe_block_header', array('content' => $edit['phplist_subscribe_block_header'], 'format' => $edit['phplist_subscribe_block_header_format']));
    */
    variable_set('phplist_subscribe_block_header', $edit['phplist_subscribe_block_header']);
    variable_set('phplist_email_confirm', $edit['phplist_email_confirm']);
    variable_set('phplist_email_width', $edit['phplist_email_width']);
    variable_set('phplist_format_block', $edit['phplist_format_block']);
    variable_set('phplist_format_default', $edit['phplist_format_default']);
  }
}

/**
 * Implements hook_block_view().
 */
function phplist_block_view($delta) {
  if (TRUE && $delta == 'PHPlist subscribe' && variable_get('phplist_connection', FALSE)) {
    global $user;
    $lists = _phplist_get_lists($user);

    if (count($lists) > 0) {
      $block = array(
        'subject' => variable_get('phplist_block_title', t('Subscribe to our mailing list')),
        'content' => drupal_get_form('phplist_subscribe_form'),
      );
      return $block;
    }
  }
}


/*
 * Implementation of hook_form_alter().
 *
 * Adds checkboxes to the user registration form so that users can subscribe to
 * lists as they register.
 *
 * Adds a submit function (phplist_admin_settings_submit_pass()) to the admin
 * settings form so that the PHPList database password isn't blanked out.
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function phplist_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_register_form' && variable_get('phplist_subscribe_on_register', 0)) {
    $preamble = variable_get('phplist_register_preamble', '');
    $form['mailing_lists'] = array(
      '#type' => 'fieldset',
      '#title' => t('Mailing lists'),
      '#weight' => 29,
    );
    if ($preamble != '') {
      $form['mailing_lists']['preamble'] = array(
        '#type' => 'markup',
        '#value' => $preamble,
      );
    }
    $form['mailing_lists']['lists'] = phplist_subscribe_checkboxes(FALSE, "registrationpage");
  }
  elseif ($form_id == 'user_register_form' && variable_get('phplist_autosubscribe_on_register', FALSE)) {
    // Ensure auto-subscribe happens if required
    if (variable_get('phplist_autosubscribe_on_register', FALSE) && !variable_get('phplist_subscribe_on_register', FALSE)) {
      $lists = _phplist_get_lists($user);

      $form['phplist_subscribe_lists'] = array(
        '#type' => 'value',
        '#value' => $lists[0]->lid,
      );
    }
  }
  elseif ($form_id == 'phplist_admin_settings') {
    // prevent saving settings from resetting phplist db password
    $form['#submit'][] = 'phplist_admin_settings_submit_pass';
    $form['#submit'] = array_reverse($form['#submit']);
  }
}

/*
 * This submit function is added to the phplist_admin_settings() form to make
 * sure PHPList database password isn't unset by saving the admin settings.
 *
 * If the phplist_dbpass variable is (1) already set and (2) hasn't been reset
 * on this edit, this function removes the phplist_dbpass field from the form
 * before it is saved so that the password is not *unset* by saving the form.
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function phplist_admin_settings_submit_pass($form_id, &$form_values) {
  if (($pwd = variable_get('phplist_dbpass', '')) && $form_values['values']['phplist_dbpass'] == '') {
    $form_values['values']['phplist_dbpass'] = $pwd;
  }
}


/*
 * Create the 'subscribe' form
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function phplist_subscribe_form($form) {
  global $user;

  if (false && ($user->uid == 1 || user_access('manage subscriptions')) && $user->uid != arg(1)) {
    // This is an admin editing someone else's subs
    $cur_user = user_load(arg(1));
  }
  else {
    $cur_user = $user;
  }
  $form = array();

//  $block_body = variable_get('phplist_subscribe_block_header', '');
  $block_body = variable_get('phplist_subscribe_block_header', array('value' => '', 'format' => filter_default_format()));
  if (!empty($block_body['value']))
    $form['subscribe_block_header'] = array(
      '#type' => 'item',
      '#title' => check_markup($block_body['value'], $block_body['format'], $langcode = '' /* TODO Set this variable. */, FALSE)
    );

  if ($cur_user->uid) {
    // Logged in, so do nothing
    // TODO Add list of mailing lists to which the logged in person is subscribed
    /*    $form['mail'] = array(
     '#type' => 'item',
     '#title' => t('E-mail'),
     '#size' => variable_get('phplist_email_width', 16),
     '#value' => $user->mail,
     );
     */
    $form['link'] = array(
      '#type' => 'markup',
      '#prefix' => '<div>'. l(t('Manage my subscriptions'), 'user/' . $cur_user->uid . '/newsletters'),
      '#suffix' => '</div>',
      '#value' => '',
    );
  }
  else {
    $form['phplist_mail'] = array(
      '#type' => 'textfield',
      '#title' => t('E-mail'),
      '#size' => variable_get('phplist_email_width', 16),
    );
    if (variable_get('phplist_email_confirm', 0)) {
      $form['mailconfirm'] = array(
        '#type' => 'textfield',
        '#title' => t('Confirm e-mail'),
        '#size' => variable_get('phplist_email_width', 16),
      );
    }

    $form['lists'] = phplist_subscribe_checkboxes(FALSE, "block");

    if (variable_get('phplist_format_block', 1)) {
      $form['phplist_html'] = array(
        '#type' => 'checkbox',
        '#title' => t('Receive emails in plain text format'),
        '#options' => array(0, 1),
        '#default_value' => 0,
      );
    }
    else {
      $form['phplist_html'] = array(
        '#type' => 'value',
        '#value' => variable_get('phplist_format_default', 0),
      );
    }

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Subscribe'),
    );
  }

  return $form;
}


/**
 * Generate a checkbox for each configured mailing list.
 * Returns a 'checkboxes' form element.
 */
function phplist_subscribe_checkboxes($hide_one = TRUE, $context = "block") {
  global $user;
  $lists = _phplist_get_lists($user);
  $options = array();
  $auto = 0;

  if ($context == "block") {
    $booshowdescription = variable_get('phplist_descriptions_block', 1);
  }
  else {
    $booshowdescription = variable_get('phplist_descriptions_registerpage', 1);
  }

  //if showing descriptions we want to bold the list name; otherwise not
  if ($booshowdescription) {
    $pref = "<b>";
    $postf = "</b>";
  }
  else {
    $pref = "";
    $postf = "";
  }

  foreach ($lists as $l) {
    //$options[$l->lid] = "<b>" . stripslashes ($l->name) . "</b> <br /><blockquote><i>" . stripslashes ($l->description) . "</i></blockquote>";

    $options[$l->lid] = $pref . stripslashes($l->name) . $postf . ($booshowdescription ? ' <p class="phplist_dsc">' . stripslashes($l->description) . "</p>" : "");

    if (count($options) == 1 && variable_get('phplist_autosubscribe_on_register', FALSE)) {
      $options[$l->lid] .= ' (' . t('Required') . ')';
      $auto = $l->lid;
    }
  }

  if (count($options) == 1 && $hide_one) {
    $form_checkboxes['phplist_subscribe_lists'] = array(
      '#type' => 'value',
      '#value' => array_keys($options),
    );
  }
  else {
    $form_checkboxes['phplist_subscribe_lists'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Subscribe me to'),
      '#default_value' => array_keys($options),
      '#options' => $options,
      '#attributes' => array('onclick' => 'if(this.value==' . $auto . ')this.checked=TRUE'),
    );
  }

  return $form_checkboxes;
}

/*
 * Validate the subscribe form:
 * - validate the email address
 * - check that the email field matches email confirm field
 * - confirm that there is at least one subscription selected
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function phplist_subscribe_form_validate($form, &$form_state) {
  if (! valid_email_address($form_state['values']['phplist_mail'])) {
    form_set_error('phplist_mail', t('Please enter a valid email address.'));
  }
  elseif (variable_get('phplist_email_confirm', 0) && $form_state['values']['phplist_mail'] !== $form_state['values']['mailconfirm']) {
    form_set_error('mailconfirm', t('The email address you entered does not match.'));
  }

  if (_phplist_lookup_phplistid($form_state['values']['phplist_mail'])) {
    form_set_error('mailconfirm', t('This email address is already registered. Please login to access your newsletter preferences.'));
  }

  if (count($form_state['values']['phplist_subscribe_lists']) == 0) {
    form_set_error('phplist_subscribe_lists', t('You did not select any mailing lists to subscribe to.'));
  }
}

/*
 * This uses what I would call 'AHAX' -- it's like AJAX but without the
 * Javascript and with HTML instead of XML. Or maybe that should just be 'HAX'
 * since it's not Asynchronous either :)
 *
 * Takes the user's email and list subscription preferences from the
 * phplist_subscribe_form() (validated already by phplist_subscribe_form_validate())
 * and submits them to phplist's 'subscribe' page as if it were a normally-POSTed
 * form. Checks the response for the string "Thank you for subscribing" which
 * means that PHPList has added the user to the list (and will send out its own
 * confirmation email)
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function phplist_subscribe_form_submit($form, &$form_state) {
  global $user;

  $data = array(
    'email' => $form_state['values']['phplist_mail'],
    'emailconfirm' => $form_state['values']['phplist_mail'], // this has already been checked in the _validate function
    'htmlemail' => ($form_state['values']['phplist_html'] ? 0 : 1), // looks backwards, is not. see usage in _phplist_sync_user()
    'subscribe' => 'Subscribe',
  );

  $lists = _phplist_get_lists($user);

  foreach ($lists as $l) {
    if ($form_state['values']['phplist_subscribe_lists'][$l->lid] || count($lists) == 1) {
      $listkey = '[' . $l->lid . ']';
      $data['list' . $listkey] = 'signup';
    }
  }

  $postdata = '';
  foreach ($data as $key => $val) {
    $postdata .= ($postdata ? '&' : '') . urlencode($key) . '=' . urlencode($val);
  }

  $subscribe_url = url(variable_get('phplist_subscribe_url', 'lists'), array('query' => array('p' => 'subscribe'), 'absolute' => TRUE));
  //echo $subscribe_url;

  $headers = array('Content-Type' => 'application/x-www-form-urlencoded');

  $result = drupal_http_request($subscribe_url, array('headers' => $headers, 'method' => 'POST', 'data' => $postdata));

  if (PHPLIST_DEBUG) {
    ob_clean();
    print '<p>' . t('Result of form submission to PHPlist:') . '</p>';
    print $result->data;
    print '<fieldset>';
    print_r($result);
    print '</fieldset>';
    exit;
  }

  if (strpos($result->data, t('Thank you for subscribing')) !== FALSE) {
    drupal_set_message(t('You will be e-mailed shortly with a request to confirm your membership. Please make sure to click the link in that message to confirm your subscription.'));
  }
  else {
    drupal_set_message(t('Oops, you have not been added to the mailing list; please contact a site administrator.'));
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function phplist_unsubscribe_form() {
  // Use the PHPlist uid if available - for anonymous users
  // Drupal users should be sent to their account page
  global $user;
  if ($user->uid > 0) {
    drupal_goto('newsletters');
  }

  $email = '';

  if (isset($_GET["uid"])) {
    $prefix = _phplist_dbconn();
    if ($prefix !== FALSE) {
      // Lookup email from PHPlist
      db_set_active("phplist");
      $email = db_query("SELECT email FROM {$prefix['prefix']}user WHERE uniqid=:id", array(':id' => check_plain($_GET["uid"])))->fetchField();
      db_set_active("default");
    }
  }
  if ($email) {
    // Check whether this is a Drupal user
    $user = array_shift(user_load_multiple(array(), array('mail' => $email)));
    if ($user) {
      // They have a Drupal account - get them to login
      drupal_set_message(t("Please login to manage your newsletter subscriptions"));
      drupal_goto('newsletters');
    }
  }

  // If we are still here, this is a non-Druapl person unsubscribing
  $form['phplist_mail'] = array(
    '#title' => t('Email address'),
  	'#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => $email,
  );
  $form['reason'] = array(
    '#type' => 'textarea',
    '#title' => t('Reason for unsubscribing'),
    '#rows' => 4,
    '#cols' => 40,
    '#resizable' => FALSE,
    '#description' => t('We are sorry you are no longer interested in receiving our newsletters.  We would be grateful if you could tell us why.'),
  );
  $form['unsubscribe'] = array(
    '#type' => 'submit',
    '#value' => t('Unsubscribe'),
  );
  return $form;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function phplist_unsubscribe_form_validate($form_id, $form_values) {
  if (! valid_email_address($form_values['phplist_mail'])) {
    form_set_error('phplist_mail', t('Please enter a valid email address.'));
  }

  // Check this email address doesn't belong to a Drupal user
  if (array_shift(user_load_multiple(array(), array('mail' => $form_values['phplist_mail'])))) {
    drupal_set_message(t('This email address belongs to a registered account.  Please login to manage your subscriptions.'));
    drupal_goto('newsletters');
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function phplist_unsubscribe_form_submit($form_id, $form_values) {
  $data = array(
    'unsubscribeemail' => $form_values['phplist_mail'],
    'unsubscribereason' => $form_values['reason'],
    'unsubscribe' => 'Continue',
  );

  $postdata = '';
  foreach ($data as $key => $val) {
    $postdata .= ($postdata ? '&' : '') . urlencode($key) . '=' . urlencode($val);
  }

  $subscribe_url = url(variable_get('phplist_subscribe_url', 'lists'), array(
    'query' => array('p' => 'unsubscribe')
  ));

  $headers = array('Content-Type' => 'application/x-www-form-urlencoded');
  $result = drupal_http_request($subscribe_url, array('headers' => $headers, 'method' => 'POST', 'data' => $postdata));

  if ($result->code != 200 || strpos($result->data, t('You have been unsubscribed')) === FALSE) {
    drupal_set_message(t('Oops, you have not been unsubscribed; please contact a site administrator.'));
  }
  else {
    drupal_set_message(t('You have been unsubscribed from all newsletters and you will shortly receive email confirmation.'));
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function phplist_confirm_subscription() {
  $uid = isset($_GET['uid']) ? $_GET['uid'] : '';

  // Pass through to PHPlist installation
  $confirm_url = url(variable_get('phplist_subscribe_url', 'lists'), array('query' => array('p' => 'confirm', 'uid' => '')));

  $result = drupal_http_request($confirm_url);

  if ($result->code != 200) {
    // Something went wrong at the network level
    $form['info'] = array(
      '#type' => 'item',
      '#title' => t('Error with confirmation'),
      '#value' => t('Oops, you have not been confirmed; please contact a site administrator.'),
    );
  }
  elseif (strpos($result->data, 'request for confirmation was not recognised') > 0) {
    // Invalid uid
    $form['info'] = array(
      '#type' => 'item',
      '#title' => t('Problem with confirmation'),
      '#value' => t('Sorry, your request for confirmation was not recognised.
		Please make sure to use the full web address as mentioned in the email that you received.
		Sometimes this web address wraps onto multiple lines.'),
    );
  }
  elseif (strpos($result->data, 'Thank you for confirming ') > 0) {
    // All ok
    $form['info'] = array(
      '#type' => 'item',
      '#title' => t('Confirmation confirmed'),
      '#value' => t('Thank you. Your subscription is now confirmed and activated.'),
    );
  }

  return $form;
}

/**
 * Get a private token used to protect links from CSRF attacks.
 * "Borrowed" from 5 Star module :D
 */
function phplist_get_token($value) {
  global $user;

  // Anonymous users don't get a session ID, which breaks page caching.
  $session_id = $user->uid ? session_id() : '';
  $private_key = drupal_get_private_key();
  return md5($session_id . $value . $private_key);
}

/**
 * Check to see if a token value matches the specified node.
 * "Borrowed" from 5 Star module :D
 */
function phplist_check_token($token, $value) {
  return phplist_get_token($value) == $token;
}
